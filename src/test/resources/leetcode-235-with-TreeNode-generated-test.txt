import java.util.*;
import java.util.regex.*;
import java.util.stream.*;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class SolutionTest {

    Solution solution = new Solution();

    @Test
    void case1() {
        TreeNode expected = toTreeNode("6");
        TreeNode actual = solution.lowestCommonAncestor(toTreeNode("[6,2,8,0,4,7,9,null,null,3,5]"), toTreeNode("2"), toTreeNode("8"));

        assertEquals(expected.val, actual.val);
    }

    @Test
    void case2() {
        TreeNode expected = toTreeNode("2");
        TreeNode actual = solution.lowestCommonAncestor(toTreeNode("[6,2,8,0,4,7,9,null,null,3,5]"), toTreeNode("2"), toTreeNode("4"));

        assertEquals(expected.val, actual.val);
    }

    @Test
    void case3() {
        TreeNode expected = toTreeNode("2");
        TreeNode actual = solution.lowestCommonAncestor(toTreeNode("[2,1]"), toTreeNode("2"), toTreeNode("1"));

        assertEquals(expected.val, actual.val);
    }






    //See https://leetcode.com/problems/recover-binary-search-tree/discuss/32539/Tree-Deserializer-and-Visualizer-for-Python/465627
    private TreeNode toTreeNode(String rawInput) {
        rawInput = rawInput.replaceAll("\\[", "");
        rawInput = rawInput.replaceAll("\\]", "");
        rawInput = rawInput.trim();

        List<Integer> nodes = new ArrayList<>();
        StringTokenizer st = new StringTokenizer(rawInput, " ,");
        while (st.hasMoreTokens()) {
            String token = st.nextToken();
            nodes.add(
                    (token.equals("null")) ? null : Integer.valueOf(token)
            );
        }
        if (nodes.isEmpty()) {
            return null;
        }

        TreeNode[] madeNodes = new TreeNode[nodes.size()];
        Stack<TreeNode> stack = new Stack<>();
        int n = 0;
        for (int i = nodes.size() - 1; i >= 0; i--) {
            TreeNode node = (nodes.get(i) == null) ? null : new TreeNode(nodes.get(i));
            madeNodes[nodes.size() - 1 - (n++)] = node;
            stack.push(node);
        }

        TreeNode root = stack.pop();
        for (TreeNode node : madeNodes) {
            if (node != null) {
                if (!stack.empty()) node.left = stack.pop();
                if (!stack.empty()) node.right = stack.pop();
            }
        }
        return root;
    }


}